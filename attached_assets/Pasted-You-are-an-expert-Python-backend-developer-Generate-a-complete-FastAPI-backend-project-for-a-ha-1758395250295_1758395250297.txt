You are an expert Python backend developer. Generate a **complete FastAPI backend project** for a hackathon MVP called "Goa Cyber Patrol". The backend should be fully **FastAPI-based, async, and structured** for easy React frontend integration. Follow these updated requirements:

---

## 1️⃣ Project Overview

- Purpose: Detect online scams, fake hotels, and suspicious content from Telegram, Instagram, websites, and social media.
- Features:
  1. Data ingestion from Telegram (Telethon), Instagram hashtags (requests + BeautifulSoup / instaloader), websites, social media posts (FB/IG/YT), and optionally videos.
  2. Rule-based keyword/regex flagging for scams, gambling, fake jobs, prostitution.
  3. Fake hotel detection using an official resort CSV file.
  4. Evidence logging with platform, message, date, flagged reason, risk score, author, optional screenshots.
  5. Dashboard-ready endpoints returning JSON for live feed, stats, and category breakdown.
  6. Takedown recommendations:
     - Scam → "Report to Cyber Cell"
     - Fake hotel → "Report to Tourism Dept"
     - Prostitution/Gambling → "Escalate for legal action"
  7. Optional settings: upload CSV for official resort list, enable/disable platform monitoring, update keywords, manage alerts/notifications.

- All endpoints must return **JSON responses compatible with React frontend**.

---

## 2️⃣ Tech Stack

- **Backend Framework:** FastAPI (async, REST API)
- **Database:** PostgreSQL (`cyber_patrol_db`)  
  - Use SQLAlchemy ORM with `asyncpg` driver
- **Web Scraping / Data Ingestion:**  
  - Telegram: Telethon  
  - Instagram: requests + BeautifulSoup / instaloader  
  - Websites & social media posts: requests / optional Puppeteer/Playwright
- **Other Libraries:** Pandas (CSV), Regex (keyword scanning)  
- Optional: APScheduler (periodic scraping), screenshots for websites/posts  
- Future ML Extension: structured for text/video classification, NER extraction

---

## 3️⃣ Backend Folder Structure

/backend
  ├── main.py               # FastAPI entrypoint
  ├── db.py                 # PostgreSQL async connection/session setup
  ├── models.py             # ORM models / tables (flagged_posts, fake_hotels)
  ├── routes/
  │     ├── ingestion.py
  │     ├── flags.py
  │     ├── dashboard.py
  │     ├── evidence.py
  │     ├── hotels.py
  │     ├── alerts.py
  │     └── settings.py
  ├── utils/
  │     ├── telegram_client.py
  │     ├── instagram_scraper.py
  │     ├── website_scraper.py
  │     └── keyword_checker.py
  ├── data/
  │     └── official_resorts.csv

---

## 4️⃣ Database Models (PostgreSQL)

### flagged_posts
- id: SERIAL PK
- platform: TEXT
- message_text: TEXT
- date: TIMESTAMP
- flagged_reason: TEXT
- risk_score: INTEGER (0–100)
- author_id: TEXT
- screenshot_path: TEXT (optional)
- takedown_recommendation: TEXT

### fake_hotels
- id: SERIAL PK
- claimed_name: TEXT
- website_domain: TEXT
- status: TEXT (✅ Official / ❌ Fake)
- screenshot: TEXT (optional)
- notes: TEXT

---

## 5️⃣ API Endpoints

1. **Data Ingestion**  
POST /ingest/telegram, /ingest/instagram, /ingest/website, /ingest/social, /ingest/video, /ingest/text

2. **Content Analysis**  
GET /analyze/task/{task_id}, POST /analyze/website, /analyze/social, /analyze/video, /analyze/text

3. **Dashboard / Stats**  
GET /dashboard/summary, /dashboard/live_alerts, /dashboard/category_breakdown

4. **Evidence Logs**  
GET /evidence/tasks, /evidence/task/{task_id}, POST /evidence/task/{task_id}/generate_report

5. **Fake Hotels**  
GET /hotels/official_list, POST /hotels/official_list/upload, GET /hotels/fake_detected, GET /hotels/fake/{domain}, POST /hotels/check

6. **Alerts / Notifications**  
GET /alerts/recent, POST /alerts/subscribe

7. **Settings / Admin**  
GET /settings/platforms, POST /settings/platforms/update, GET /settings/keywords, POST /settings/keywords/update, POST /ml/model/update

---

## 6️⃣ Logic / Rules

- Hardcoded keywords: `"loan", "casino", "escort", "resort", "work from home", "earn daily"`
- Risk scoring: 1 keyword=40, 2 keywords=70, keyword+money=90
- Fake hotel detection: compare with CSV, mark ✅ Official / ❌ Fake
- Takedown recommendations per category

---

## 7️⃣ Integration Notes

- All endpoints return JSON for React frontend
- Include comments
- Backend runs with: `uvicorn main:app --reload`
- PostgreSQL connection string should be configurable
- Structured for future ML integration

---

## 8️⃣ Output Request

- Generate **all Python files** according to folder structure
- Include FastAPI routes, models, utility functions
- Fully runnable **PostgreSQL-backed MVP** for hackathon demo
- Minimal MVP features only, no ML required now
